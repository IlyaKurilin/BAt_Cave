// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–æ–∫ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫–∏ –¥–ª—è PWA –∏–∑ SVG

const fs = require('fs');
const path = require('path');

// –†–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è PWA
const iconSizes = [72, 96, 128, 144, 152, 192, 384, 512];

// HTML –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è canvas —Å –∏–∫–æ–Ω–∫–æ–π
const createIconHTML = (size) => `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Icon Creator</title>
    <style>
        body { margin: 0; padding: 20px; background: #f0f0f0; }
        canvas { border: 1px solid #ccc; margin: 10px; }
    </style>
</head>
<body>
    <h1>Flappy Bird Icon Creator</h1>
    <canvas id="canvas" width="${size}" height="${size}"></canvas>
    
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏
        function drawIcon() {
            const size = ${size};
            const scale = size / 512; // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ 512px
            
            // –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            const gradient = ctx.createLinearGradient(0, 0, 0, size);
            gradient.addColorStop(0, '#87CEEB');
            gradient.addColorStop(0.7, '#98FB98');
            gradient.addColorStop(1, '#228B22');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, size, size);
            
            // –û–±–ª–∞–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤)
            if (size >= 128) {
                ctx.fillStyle = 'rgba(255,255,255,0.7)';
                ctx.beginPath();
                ctx.arc(120 * scale, 80 * scale, 25 * scale, 0, Math.PI * 2);
                ctx.fill();
            }
            
            // –¢—Ä—É–±—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
            ctx.fillStyle = '#228B22';
            ctx.strokeStyle = '#1a5f1a';
            ctx.lineWidth = 2 * scale;
            
            // –õ–µ–≤–∞—è —Ç—Ä—É–±–∞
            ctx.fillRect(80 * scale, 0, 40 * scale, 180 * scale);
            ctx.strokeRect(80 * scale, 0, 40 * scale, 180 * scale);
            
            ctx.fillRect(80 * scale, 320 * scale, 40 * scale, (512-320) * scale);
            ctx.strokeRect(80 * scale, 320 * scale, 40 * scale, (512-320) * scale);
            
            // –ü—Ä–∞–≤–∞—è —Ç—Ä—É–±–∞
            ctx.fillRect(400 * scale, 0, 40 * scale, 150 * scale);
            ctx.strokeRect(400 * scale, 0, 40 * scale, 150 * scale);
            
            ctx.fillRect(400 * scale, 280 * scale, 40 * scale, (512-280) * scale);
            ctx.strokeRect(400 * scale, 280 * scale, 40 * scale, (512-280) * scale);
            
            // –ó–µ–º–ª—è
            ctx.fillStyle = '#228B22';
            ctx.fillRect(0, 480 * scale, size, 32 * scale);
            
            // –ü—Ç–∏—Ü–∞ - –æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ
            const birdX = 256 * scale;
            const birdY = 230 * scale;
            const birdW = 35 * scale;
            const birdH = 28 * scale;
            
            // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –ø—Ç–∏—Ü—ã
            const birdGradient = ctx.createLinearGradient(
                birdX - birdW, birdY - birdH, 
                birdX + birdW, birdY + birdH
            );
            birdGradient.addColorStop(0, '#FFD700');
            birdGradient.addColorStop(1, '#FFA500');
            
            ctx.fillStyle = birdGradient;
            ctx.beginPath();
            ctx.ellipse(birdX, birdY, birdW, birdH, 0, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.strokeStyle = '#CC8400';
            ctx.lineWidth = 2 * scale;
            ctx.stroke();
            
            // –ö—Ä—ã–ª–æ –ø—Ç–∏—Ü—ã
            const wingGradient = ctx.createLinearGradient(
                birdX - 22 * scale, birdY - 18 * scale,
                birdX + 22 * scale, birdY + 18 * scale
            );
            wingGradient.addColorStop(0, '#FFA500');
            wingGradient.addColorStop(1, '#FF8C00');
            
            ctx.fillStyle = wingGradient;
            ctx.beginPath();
            ctx.ellipse(birdX - 11 * scale, birdY - 5 * scale, 22 * scale, 18 * scale, 0, 0, Math.PI * 2);
            ctx.fill();
            
            // –ö–ª—é–≤ –ø—Ç–∏—Ü—ã
            ctx.fillStyle = '#FF6B47';
            ctx.beginPath();
            ctx.moveTo((birdX + birdW - 6) * scale, (birdY - 2) * scale);
            ctx.lineTo((birdX + birdW + 14) * scale, (birdY - 8) * scale);
            ctx.lineTo((birdX + birdW + 14) * scale, (birdY + 4) * scale);
            ctx.closePath();
            ctx.fill();
            
            // –ì–ª–∞–∑ –ø—Ç–∏—Ü—ã
            if (size >= 64) {
                ctx.fillStyle = '#000';
                ctx.beginPath();
                ctx.arc((birdX + 14) * scale, (birdY - 10) * scale, 6 * scale, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.fillStyle = '#FFF';
                ctx.beginPath();
                ctx.arc((birdX + 16) * scale, (birdY - 12) * scale, 2 * scale, 0, Math.PI * 2);
                ctx.fill();
            }
            
            // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤)
            if (size >= 192) {
                ctx.strokeStyle = '#FFD700';
                ctx.lineWidth = 3 * scale;
                ctx.setLineDash([5 * scale, 5 * scale]);
                ctx.beginPath();
                ctx.arc(birdX, birdY, 50 * scale, 0, Math.PI * 2);
                ctx.stroke();
                ctx.setLineDash([]);
            }
        }
        
        // –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É
        drawIcon();
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏
        function downloadIcon() {
            const link = document.createElement('a');
            link.download = 'icon-${size}.png';
            link.href = canvas.toDataURL();
            link.click();
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(downloadIcon, 1000);
    </script>
    
    <button onclick="downloadIcon()">–°–∫–∞—á–∞—Ç—å –∏–∫–æ–Ω–∫—É ${size}x${size}</button>
    
    <h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
    <ol>
        <li>–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ</li>
        <li>–ò–∫–æ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–µ—Ç—Å—è</li>
        <li>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤</li>
    </ol>
</body>
</html>
`;

// –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∫–æ–Ω–∫–∏
iconSizes.forEach(size => {
    const filename = `icon-creator-${size}.html`;
    const filePath = path.join(__dirname, filename);
    fs.writeFileSync(filePath, createIconHTML(size));
    console.log(`Created ${filename}`);
});

console.log('\\nüì± Icon creator files generated!');
console.log('\\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏–∫–æ–Ω–æ–∫:');
console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–∂–¥—ã–π icon-creator-*.html —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
console.log('2. –ò–∫–æ–Ω–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞—é—Ç—Å—è');
console.log('3. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ PNG —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É assets/');
console.log('4. –£–¥–∞–ª–∏—Ç–µ HTML —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');

// –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ bash —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
const bashScript = \`#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é ImageMagick (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)

if command -v convert &> /dev/null; then
    echo "Creating icons using ImageMagick..."
    
    # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∏–∑ SVG
    for size in 72 96 128 144 152 192 384 512; do
        convert -background none -size \${size}x\${size} icon.svg icon-\${size}.png
        echo "Created icon-\${size}.png"
    done
    
    echo "‚úÖ All icons created successfully!"
else
    echo "‚ùå ImageMagick not found. Please install it or use the HTML files."
    echo "Install ImageMagick:"
    echo "  Ubuntu/Debian: sudo apt-get install imagemagick"
    echo "  macOS: brew install imagemagick"
    echo "  Windows: Download from https://imagemagick.org/script/download.php"
fi
\`;

fs.writeFileSync(path.join(__dirname, 'create-icons.sh'), bashScript);
console.log('\\nüîß Also created create-icons.sh for ImageMagick users');
