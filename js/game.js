// Game.js - –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
window.Game = class Game {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ canvas
        this.setupCanvas();
        
        // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏
        this.gameState = 'menu'; // menu, playing, gameOver, paused
        this.score = 0;
        this.highScore = parseInt(localStorage.getItem('flappyHighScore')) || 0;
        this.frameCount = 0;
        this.lastTime = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        this.difficulty = localStorage.getItem('flappyDifficulty') || 'normal';
        this.powerUpsEnabled = localStorage.getItem('flappyPowerUps') !== 'false';
        this.soundEnabled = localStorage.getItem('flappySound') !== 'false';
        this.godMode = localStorage.getItem('flappyGodMode') === 'true';
        
        // –ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        this.bird = new window.Bird(this);
        this.pipes = new window.PipeManager(this);
        this.powerUps = new window.PowerUpManager(this);
        this.achievements = new window.AchievementManager(this);
        this.soundManager = new window.SoundManager();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—É–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        this.soundManager.setEnabled(this.soundEnabled);
        
        // –§–æ–Ω –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.background = {
            clouds: this.generateClouds(),
            ground: 0,
            themeIndex: 0 // –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ —Ñ–æ–Ω–∞
        };
        
        // –°–∏—Å—Ç–µ–º–∞ —Ñ–µ–µ—Ä–≤–µ—Ä–∫–æ–≤
        this.fireworks = {
            particles: [],
            active: false,
            lastCelebration: 0
        };
        
        // –¢–µ–º—ã —Ñ–æ–Ω–æ–≤
        this.backgroundThemes = [
            {
                name: 'Deep Cave',
                colors: ['#1a1a2e', '#16213e', '#0f3460', '#0a1f3b'],
                batColor: 'rgba(80, 80, 80, 0.4)'
            },
            {
                name: 'Crystal Cave',
                colors: ['#2d1b69', '#11998e', '#38ef7d', '#0f4c75'],
                batColor: 'rgba(100, 200, 255, 0.3)'
            },
            {
                name: 'Fire Cave',
                colors: ['#3c1053', '#ad5389', '#ff6b6b', '#ee5a24'],
                batColor: 'rgba(255, 100, 100, 0.4)'
            },
            {
                name: 'Ice Cave',
                colors: ['#667eea', '#764ba2', '#a8edea', '#fed6e3'],
                batColor: 'rgba(150, 200, 255, 0.5)'
            },
            {
                name: 'Mystic Cave',
                colors: ['#2c3e50', '#4a00e0', '#8e2de2', '#74b9ff'],
                batColor: 'rgba(180, 120, 255, 0.4)'
            }
        ];
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        this.difficultySettings = {
            easy: {
                pipeGap: 140,
                pipeSpeed: 1.5,
                powerUpChance: 0.3
            },
            normal: {
                pipeGap: 120,
                pipeSpeed: 2,
                powerUpChance: 0.2
            },
            hard: {
                pipeGap: 100,
                pipeSpeed: 2.5,
                powerUpChance: 0.15
            },
            extreme: {
                pipeGap: 80,
                pipeSpeed: 3,
                powerUpChance: 0.1
            }
        };
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –º–µ—Ç–æ–¥–æ–≤
        this.gameLoop = this.gameLoop.bind(this);
        this.handleResize = this.handleResize.bind(this);
        
        // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        this.gameLoop();
    }
    
    setupCanvas() {
        // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        this.gameWidth = this.canvas.width;
        this.gameHeight = this.canvas.height;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        this.ctx.imageSmoothingEnabled = true;
        this.ctx.imageSmoothingQuality = 'high';
    }
    
    setupEventListeners() {
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', this.handleResize);
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                e.preventDefault();
                this.handleInput();
            }
        });
        
        // –¢–∞—á-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.handleInput();
        });
        
        this.canvas.addEventListener('click', (e) => {
            if (this.gameState === 'playing') {
                this.handleInput();
            }
        });
        
        // –ü–∞—É–∑–∞ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        window.addEventListener('blur', () => {
            if (this.gameState === 'playing') {
                this.pause();
            }
        });
    }
    
    handleResize() {
        this.setupCanvas();
    }
    
    handleInput() {
        switch (this.gameState) {
            case 'playing':
                this.bird.flap();
                break;
            case 'gameOver':
                // –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤ UI
                break;
        }
    }
    
    startGame() {
        this.gameState = 'playing';
        this.score = 0;
        this.frameCount = 0;
        
        // –°–±—Ä–æ—Å —Ç–µ–º—ã —Ñ–æ–Ω–∞
        this.background.themeIndex = 0;
        
        // –°–±—Ä–æ—Å —Ñ–µ–µ—Ä–≤–µ—Ä–∫–æ–≤
        this.fireworks.particles = [];
        this.fireworks.active = false;
        this.fireworks.lastCelebration = 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—á—ë—Ç–∞
        if (window.UI) {
            window.UI.updateScore(this.score);
        }
        
        // –°–±—Ä–æ—Å –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.bird.reset();
        this.pipes.reset();
        this.powerUps.reset();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const settings = this.difficultySettings[this.difficulty];
        this.pipes.gap = settings.pipeGap;
        this.pipes.speed = settings.pipeSpeed;
        this.powerUps.spawnChance = settings.powerUpChance;
        
        // –í —Ä–µ–∂–∏–º–µ –±–æ–≥–∞ —É—Å–∫–æ—Ä—è–µ–º –∏–≥—Ä—É –≤ 4 —Ä–∞–∑–∞
        if (this.godMode) {
            this.pipes.speed *= 4;
            console.log(`üöÄ –†–µ–∂–∏–º –±–æ–≥–∞: —Å–∫–æ—Ä–æ—Å—Ç—å x4! (${this.pipes.speed})`);
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ–±–ª–∞–∫–∞
        this.background.clouds = this.generateClouds();
    }
    
    pause() {
        if (this.gameState === 'playing') {
            this.gameState = 'paused';
        } else if (this.gameState === 'paused') {
            this.gameState = 'playing';
        }
    }
    
    gameOver() {
        this.gameState = 'gameOver';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ power-ups –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
        this.bird.resetPowerUps();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥ (–Ω–µ –≤ —Ä–µ–∂–∏–º–µ –±–æ–≥–∞)
        if (this.score > this.highScore && !this.godMode) {
            this.highScore = this.score;
            localStorage.setItem('flappyHighScore', this.highScore.toString());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.achievements.checkAchievements(this.score);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        if (window.UI) {
            window.UI.showGameOver(this.score, this.highScore);
        }
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        if (this.soundEnabled) {
            this.playSound('gameOver');
        }
    }
    
    addScore(points = 1) {
        const oldScore = this.score;
        this.score += points;
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å—á—ë—Ç–∞
        if (window.UI) {
            window.UI.updateScore(this.score);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω –∫–∞–∂–¥—ã–µ 10 –æ—á–∫–æ–≤
        if (this.score % 10 === 0 && this.score > 0) {
            this.changeBackgroundTheme();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–µ—Ä–≤–µ—Ä–∫ –∫–∞–∂–¥—ã–µ 100 –æ—á–∫–æ–≤
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ –º—ã —á–µ—Ä–µ–∑ –∫–∞–∫—É—é-—Ç–æ —Å–æ—Ç–Ω—é
        const oldHundreds = Math.floor(oldScore / 100);
        const newHundreds = Math.floor(this.score / 100);
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–µ–µ—Ä–≤–µ—Ä–∫–∞: oldScore=${oldScore} (${oldHundreds}*100), newScore=${this.score} (${newHundreds}*100), lastCelebration=${this.fireworks.lastCelebration}`);
        
        if (newHundreds > oldHundreds && this.score > 0) {
            const celebrationScore = newHundreds * 100;
            if (celebrationScore !== this.fireworks.lastCelebration) {
                console.log(`üéÜ –£–°–õ–û–í–ò–ï –í–´–ü–û–õ–ù–ï–ù–û! –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–µ—Ä–≤–µ—Ä–∫ –Ω–∞ ${celebrationScore} –æ—á–∫–∞—Ö!`);
                this.launchFireworks();
                this.fireworks.lastCelebration = celebrationScore;
            }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–ª –≤ —Ä–µ–∂–∏–º–µ –±–æ–≥–∞ –ø—Ä–∏ 1000 –æ—á–∫–æ–≤
        if (this.godMode && this.score >= 1000) {
            this.triggerGodModeFinale();
            return;
        }
        
        // –ó–≤—É–∫ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ –æ—á–∫–æ–≤
        if (this.soundEnabled) {
            this.playSound('score');
        }
    }
    
    playSound(type) {
        if (this.soundEnabled && this.soundManager) {
            this.soundManager.play(type);
        }
    }
    
    saveSoundEnabled(enabled) {
        this.soundEnabled = enabled;
        this.soundManager.setEnabled(enabled);
        localStorage.setItem('flappySound', enabled.toString());
    }
    
    saveGodMode(enabled) {
        this.godMode = enabled;
        localStorage.setItem('flappyGodMode', enabled.toString());
        console.log(`üéÆ –†–µ–∂–∏–º –±–æ–≥–∞: ${enabled ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù'}`);
    }
    
    triggerGodModeFinale() {
        console.log("üéÜüí• –§–ò–ù–ê–õ –†–ï–ñ–ò–ú–ê –ë–û–ì–ê! 1000+ –û–ß–ö–û–í!");
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
        this.gameState = 'godModeFinale';
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–≥–∞-—Ñ–µ–µ—Ä–≤–µ—Ä–∫
        this.launchMegaFireworks();
        
        // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(() => {
            if (window.UI) {
                window.UI.showGodModeFinale(this.score);
            }
        }, 2000);
        
        // –ó–≤—É–∫ –ø–æ–±–µ–¥—ã
        if (this.soundEnabled) {
            this.playSound('themeChange');
        }
    }
    
    launchMegaFireworks() {
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤–Ω—ã–π —Ñ–µ–µ—Ä–≤–µ—Ä–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª–∞
        this.fireworks.active = true;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ —Ñ–µ–µ—Ä–≤–µ—Ä–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        for (let i = 0; i < 20; i++) {
            setTimeout(() => {
                this.createMegaFireworkBurst();
            }, i * 100);
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.fireworks.active = false;
        }, 5000);
    }
    
    createMegaFireworkBurst() {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∑—Ä—ã–≤–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        for (let burst = 0; burst < 3; burst++) {
            const x = Math.random() * this.gameWidth;
            const y = Math.random() * this.gameHeight * 0.8 + this.gameHeight * 0.1;
            
            // –ë–æ–ª–µ–µ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª–∞
            const colors = [
                '#FF0000', '#FF4500', '#FFD700', '#ADFF2F', 
                '#00FFFF', '#0080FF', '#8A2BE2', '#FF1493',
                '#FFFFFF', '#FFA500'
            ];
            const color = colors[Math.floor(Math.random() * colors.length)];
            
            // –ë–æ–ª—å—à–µ —á–∞—Å—Ç–∏—Ü –¥–ª—è –º–µ–≥–∞-—ç—Ñ—Ñ–µ–∫—Ç–∞
            const particleCount = 25;
            for (let i = 0; i < particleCount; i++) {
                const angle = (i / particleCount) * Math.PI * 2;
                const speed = 3 + Math.random() * 6;
                
                this.fireworks.particles.push({
                    x: x,
                    y: y,
                    vx: Math.cos(angle) * speed,
                    vy: Math.sin(angle) * speed,
                    color: color,
                    life: 120, // –î–æ–ª—å—à–µ –∂–∏–≤—É—Ç
                    maxLife: 120,
                    size: 3 + Math.random() * 5,
                    gravity: 0.03
                });
            }
        }
    }
    
    changeBackgroundTheme() {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
        this.background.themeIndex = (this.background.themeIndex + 1) % this.backgroundThemes.length;
        const theme = this.backgroundThemes[this.background.themeIndex];
        
        console.log(`üé® –°–º–µ–Ω–∞ —Ñ–æ–Ω–∞ –Ω–∞: ${theme.name}`);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç —Å–º–µ–Ω—ã —Ç–µ–º—ã
        if (this.soundEnabled) {
            this.playSound('themeChange');
        }
    }
    
    launchFireworks() {
        console.log(`üéÜ –ë–û–õ–¨–®–û–ô –§–ï–ï–†–í–ï–†–ö! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å ${this.score} –æ—á–∫–∞–º–∏!`);
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–µ–µ—Ä–≤–µ—Ä–∫–æ–≤
        this.fireworks.active = true;
        
        // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –∑–∞–ª–ø–æ–≤ –¥–ª—è –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        for (let i = 0; i < 8; i++) {
            setTimeout(() => {
                this.createFireworkBurst();
            }, i * 150);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ª–ø—ã –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        for (let i = 0; i < 5; i++) {
            setTimeout(() => {
                this.createBigFireworkBurst();
            }, i * 300 + 500);
        }
        
        // –í—ã–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã (–¥–æ–ª—å—à–µ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞)
        setTimeout(() => {
            this.fireworks.active = false;
        }, 4000);
        
        // –ó–≤—É–∫ —Ñ–µ–µ—Ä–≤–µ—Ä–∫–∞
        if (this.soundEnabled) {
            this.playSound('themeChange'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–≤—É–∫
        }
    }
    
    createFireworkBurst() {
        console.log(`üí• –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–µ–µ—Ä–≤–µ—Ä–∫! –ß–∞—Å—Ç–∏—Ü: ${this.fireworks.particles.length}`);
        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≤–∑—Ä—ã–≤–∞
        const x = Math.random() * this.gameWidth;
        const y = Math.random() * this.gameHeight * 0.6 + this.gameHeight * 0.1;
        
        // –ë–æ–ª–µ–µ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        const colors = [
            '#FF6B35', '#FFD700', '#FF1493', '#00CED1', 
            '#32CD32', '#FF69B4', '#FFA500', '#9370DB',
            '#FF0000', '#00FF00', '#0080FF', '#FFFFFF'
        ];
        const color = colors[Math.floor(Math.random() * colors.length)];
        
        // –ë–æ–ª—å—à–µ —á–∞—Å—Ç–∏—Ü –¥–ª—è –±–æ–ª–µ–µ –ø—ã—à–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        const particleCount = 20;
        for (let i = 0; i < particleCount; i++) {
            const angle = (i / particleCount) * Math.PI * 2;
            const speed = 3 + Math.random() * 5;
            
            this.fireworks.particles.push({
                x: x,
                y: y,
                vx: Math.cos(angle) * speed,
                vy: Math.sin(angle) * speed,
                color: color,
                life: 80, // –î–æ–ª—å—à–µ –∂–∏–≤—É—Ç
                maxLife: 80,
                size: 3 + Math.random() * 4, // –ë–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä
                gravity: 0.04
            });
        }
    }
    
    createBigFireworkBurst() {
        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –≤–∑—Ä—ã–≤–∞
        const x = Math.random() * this.gameWidth;
        const y = Math.random() * this.gameHeight * 0.5 + this.gameHeight * 0.2;
        
        // –û—á–µ–Ω—å —è—Ä–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞
        const colors = [
            '#FFD700', '#FF0000', '#00FF00', '#0080FF', 
            '#FF1493', '#00FFFF', '#FFFFFF', '#FFA500',
            '#9370DB', '#FF69B4', '#32CD32', '#FF4500'
        ];
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∫—Ä—É–≥–æ–≤ —á–∞—Å—Ç–∏—Ü
        for (let ring = 0; ring < 3; ring++) {
            const color = colors[Math.floor(Math.random() * colors.length)];
            const particleCount = 25 + ring * 5; // –ë–æ–ª—å—à–µ —á–∞—Å—Ç–∏—Ü –≤ –∫–∞–∂–¥–æ–º –∫–æ–ª—å—Ü–µ
            const baseSpeed = 2 + ring * 1.5;
            
            for (let i = 0; i < particleCount; i++) {
                const angle = (i / particleCount) * Math.PI * 2;
                const speed = baseSpeed + Math.random() * 3;
                
                this.fireworks.particles.push({
                    x: x,
                    y: y,
                    vx: Math.cos(angle) * speed,
                    vy: Math.sin(angle) * speed,
                    color: color,
                    life: 100 + ring * 20, // –í–Ω–µ—à–Ω–∏–µ –∫–æ–ª—å—Ü–∞ –∂–∏–≤—É—Ç –¥–æ–ª—å—à–µ
                    maxLife: 100 + ring * 20,
                    size: 4 + Math.random() * 6, // –ö—Ä—É–ø–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
                    gravity: 0.03
                });
            }
        }
    }
    
    updateFireworks() {
        if (!this.fireworks.active && this.fireworks.particles.length === 0) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã
        this.fireworks.particles = this.fireworks.particles.filter(particle => {
            particle.x += particle.vx;
            particle.y += particle.vy;
            particle.vy += particle.gravity; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
            particle.life--;
            
            return particle.life > 0;
        });
    }
    
    renderFireworks() {
        if (this.fireworks.particles.length === 0) {
            // console.log(`üö´ –ù–µ—Ç —á–∞—Å—Ç–∏—Ü –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞`);
            return;
        }
        // console.log(`üé® –†–µ–Ω–¥–µ—Ä–∏–º ${this.fireworks.particles.length} —á–∞—Å—Ç–∏—Ü —Ñ–µ–µ—Ä–≤–µ—Ä–∫–∞`);
        
        this.ctx.save();
        
        this.fireworks.particles.forEach(particle => {
            const alpha = particle.life / particle.maxLife;
            const glowStrength = alpha * 0.8 + 0.2;
            
            // –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞ —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º —Å–≤–µ—á–µ–Ω–∏–µ–º
            this.ctx.shadowColor = particle.color;
            this.ctx.shadowBlur = 20 * glowStrength;
            this.ctx.fillStyle = particle.color;
            this.ctx.globalAlpha = alpha;
            
            this.ctx.beginPath();
            this.ctx.arc(particle.x, particle.y, particle.size * alpha, 0, Math.PI * 2);
            this.ctx.fill();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
            this.ctx.shadowBlur = 15 * glowStrength;
            this.ctx.globalAlpha = alpha * 0.8;
            this.ctx.beginPath();
            this.ctx.arc(particle.x, particle.y, particle.size * alpha * 0.6, 0, Math.PI * 2);
            this.ctx.fill();
            
            // –Ø—Ä–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —è–¥—Ä–æ
            this.ctx.shadowBlur = 25 * glowStrength;
            this.ctx.fillStyle = '#FFFFFF';
            this.ctx.globalAlpha = alpha * 0.5;
            this.ctx.beginPath();
            this.ctx.arc(particle.x, particle.y, particle.size * alpha * 0.3, 0, Math.PI * 2);
            this.ctx.fill();
            
            // –°–±—Ä–æ—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            this.ctx.shadowBlur = 0;
            this.ctx.globalAlpha = 1;
        });
        
        this.ctx.restore();
    }
    
    generateClouds() {
        const clouds = [];
        for (let i = 0; i < 5; i++) {
            clouds.push({
                x: Math.random() * this.gameWidth,
                y: Math.random() * this.gameHeight * 0.3,
                size: 20 + Math.random() * 30,
                speed: 0.2 + Math.random() * 0.3
            });
        }
        return clouds;
    }
    
    update(deltaTime) {
        if (this.gameState !== 'playing') return;
        
        this.frameCount++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        this.bird.update(deltaTime);
        this.pipes.update(deltaTime);
        
        if (this.powerUpsEnabled) {
            this.powerUps.update(deltaTime);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω
        this.updateBackground(deltaTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —â–∏—Ç–∞
        this.updateShieldEffect();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–µ–µ—Ä–≤–µ—Ä–∫–∏
        this.updateFireworks();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
        this.checkCollisions();
    }
    
    updateBackground(deltaTime) {
        // –î–≤–∏–∂–µ–Ω–∏–µ –æ–±–ª–∞–∫–æ–≤
        this.background.clouds.forEach(cloud => {
            cloud.x -= cloud.speed * deltaTime / 16;
            if (cloud.x + cloud.size < 0) {
                cloud.x = this.gameWidth + cloud.size;
                cloud.y = Math.random() * this.gameHeight * 0.3;
            }
        });
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –∑–µ–º–ª–∏
        this.background.ground -= this.pipes.speed * deltaTime / 16;
        if (this.background.ground <= -50) {
            this.background.ground = 0;
        }
    }
    
    checkCollisions() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Ç—Ä—É–±–∞–º–∏
        if (this.pipes.checkCollision(this.bird)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±–æ–≥–∞ (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
            if (this.godMode) {
                // –†–µ–∂–∏–º –±–æ–≥–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å—Å–º–µ—Ä—Ç–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Ä–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é)
            if (this.bird.isImmortal()) {
                // –ë–µ—Å—Å–º–µ—Ä—Ç–∏–µ - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —â–∏—Ç –¥–ª—è –ø–æ–≥–ª–æ—â–µ–Ω–∏—è —É—Ä–æ–Ω–∞
            if (this.bird.consumeShield()) {
                // –©–∏—Ç –ø–æ–≥–ª–æ—Ç–∏–ª —É—Ä–æ–Ω, –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                this.createShieldEffect();
                return;
            }
            this.gameOver();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        if (this.bird.y <= 0 || this.bird.y >= this.gameHeight - 20) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –±–æ–≥–∞ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
            if (this.godMode) {
                // –í —Ä–µ–∂–∏–º–µ –±–æ–≥–∞ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º –æ—Ç –≥—Ä–∞–Ω–∏—Ü
                if (this.bird.y <= 0) {
                    this.bird.y = 1;
                    this.bird.velocity = 0;
                } else {
                    this.bird.y = this.gameHeight - 21;
                    this.bird.velocity = 0;
                }
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ—Å—Å–º–µ—Ä—Ç–∏–µ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
            if (this.bird.isImmortal()) {
                // –ë–µ—Å—Å–º–µ—Ä—Ç–∏–µ - –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º –æ—Ç –≥—Ä–∞–Ω–∏—Ü, –Ω–æ –Ω–µ —É–±–∏–≤–∞–µ–º
                if (this.bird.y <= 0) {
                    this.bird.y = 1;
                    this.bird.velocity = 0;
                } else {
                    this.bird.y = this.gameHeight - 21;
                    this.bird.velocity = 0;
                }
                return;
            }
            // –ì—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Ç–∞–∫–∂–µ –ø–æ–≥–ª–æ—â–∞—é—Ç—Å—è —â–∏—Ç–æ–º
            if (this.bird.consumeShield()) {
                // –©–∏—Ç –ø–æ–≥–ª–æ—Ç–∏–ª —É—Ä–æ–Ω, –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º –ø—Ç–∏—Ü—É –æ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
                this.createShieldEffect();
                if (this.bird.y <= 0) {
                    this.bird.y = 1;
                    this.bird.velocity = 0;
                } else {
                    this.bird.y = this.gameHeight - 21;
                    this.bird.velocity = 0;
                }
                return;
            }
            this.gameOver();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ power-ups
        if (this.powerUpsEnabled) {
            this.powerUps.checkCollision(this.bird);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç—Ä—É–± –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
        this.pipes.checkScoring(this.bird, (points) => this.addScore(points));
    }
    
    render() {
        // –†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ —Ñ–æ–Ω–∞
        this.renderBackground();
        
        if (this.gameState === 'playing' || this.gameState === 'gameOver' || this.gameState === 'paused') {
            // –†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            this.pipes.render(this.ctx);
            
            if (this.powerUpsEnabled) {
                this.powerUps.render(this.ctx);
            }
            
            this.bird.render(this.ctx);
            
            // –†–µ–Ω–¥–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ —â–∏—Ç–∞
            this.renderShieldEffect();
            
            // –†–µ–Ω–¥–µ—Ä —Ñ–µ–µ—Ä–≤–µ—Ä–∫–∞
            this.renderFireworks();
        }
        
        // –†–µ–Ω–¥–µ—Ä –ø–∞—É–∑—ã
        if (this.gameState === 'paused') {
            this.renderPause();
        }
    }
    
    renderBackground() {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        const theme = this.backgroundThemes[this.background.themeIndex];
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç –ø–µ—â–µ—Ä—ã —Å —Ü–≤–µ—Ç–∞–º–∏ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.gameHeight);
        gradient.addColorStop(0, theme.colors[0]);
        gradient.addColorStop(0.3, theme.colors[1]);
        gradient.addColorStop(0.7, theme.colors[2]);
        gradient.addColorStop(1, theme.colors[3]);
        
        this.ctx.fillStyle = gradient;
        this.ctx.fillRect(0, 0, this.gameWidth, this.gameHeight);
        
        // –õ–µ—Ç—É—á–∏–µ –º—ã—à–∏ –≤ –¥–∞–ª–∏ (—Å —Ü–≤–µ—Ç–æ–º —Ç–µ–º—ã)
        this.ctx.fillStyle = theme.batColor;
        this.background.clouds.forEach(cloud => {
            this.ctx.save();
            this.ctx.translate(cloud.x, cloud.y);
            // –†–∏—Å—É–µ–º —Å–∏–ª—É—ç—Ç –ª–µ—Ç—É—á–µ–π –º—ã—à–∏
            this.ctx.beginPath();
            this.ctx.moveTo(-cloud.size/4, 0);
            this.ctx.quadraticCurveTo(-cloud.size/2, -cloud.size/3, -cloud.size/3, cloud.size/4);
            this.ctx.quadraticCurveTo(-cloud.size/6, cloud.size/3, 0, 0);
            this.ctx.quadraticCurveTo(cloud.size/6, cloud.size/3, cloud.size/3, cloud.size/4);
            this.ctx.quadraticCurveTo(cloud.size/2, -cloud.size/3, cloud.size/4, 0);
            this.ctx.closePath();
            this.ctx.fill();
            this.ctx.restore();
        });
        
        // –ü–æ–ª –ø–µ—â–µ—Ä—ã
        this.ctx.fillStyle = '#2D1B1B';
        this.ctx.fillRect(0, this.gameHeight - 25, this.gameWidth, 25);
        
        // –¢–µ–∫—Å—Ç—É—Ä–∞ –ø–æ–ª–∞ –ø–µ—â–µ—Ä—ã (–∫–∞–º–Ω–∏)
        this.ctx.fillStyle = '#3D2B2B';
        for (let x = this.background.ground; x < this.gameWidth; x += 30) {
            // –ö–∞–º–Ω–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            const stoneSize = 8 + Math.sin(x * 0.1) * 4;
            this.ctx.fillRect(x, this.gameHeight - 20, stoneSize, 10);
            this.ctx.fillRect(x + 15, this.gameHeight - 15, stoneSize * 0.7, 8);
        }
        
        // –°—Ç–∞–ª–∞–∫—Ç–∏—Ç—ã –Ω–∞ –ø–æ—Ç–æ–ª–∫–µ
        this.ctx.fillStyle = '#4A4A4A';
        for (let x = 50; x < this.gameWidth; x += 80) {
            const height = 15 + Math.sin(x * 0.05) * 10;
            this.ctx.beginPath();
            this.ctx.moveTo(x, 0);
            this.ctx.lineTo(x - 8, height);
            this.ctx.lineTo(x + 8, height);
            this.ctx.closePath();
            this.ctx.fill();
        }
        
        // –°—Ç–∞–ª–∞–≥–º–∏—Ç—ã –Ω–∞ –ø–æ–ª—É
        for (let x = 80; x < this.gameWidth; x += 90) {
            const height = 12 + Math.sin(x * 0.07) * 8;
            this.ctx.beginPath();
            this.ctx.moveTo(x, this.gameHeight - 25);
            this.ctx.lineTo(x - 6, this.gameHeight - 25 - height);
            this.ctx.lineTo(x + 6, this.gameHeight - 25 - height);
            this.ctx.closePath();
            this.ctx.fill();
        }
        
        // –°–ª–∞–±–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ (—ç—Ñ—Ñ–µ–∫—Ç —Ñ–∞–∫–µ–ª–æ–≤)
        const time = Date.now() * 0.003;
        this.ctx.save();
        this.ctx.globalAlpha = 0.3 + Math.sin(time) * 0.1;
        const lightGradient = this.ctx.createRadialGradient(
            this.gameWidth * 0.8, this.gameHeight * 0.3, 0,
            this.gameWidth * 0.8, this.gameHeight * 0.3, 150
        );
        lightGradient.addColorStop(0, '#FF6B35');
        lightGradient.addColorStop(1, 'transparent');
        this.ctx.fillStyle = lightGradient;
        this.ctx.fillRect(0, 0, this.gameWidth, this.gameHeight);
        this.ctx.restore();
    }
    
    renderPause() {
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
        this.ctx.fillRect(0, 0, this.gameWidth, this.gameHeight);
        
        this.ctx.fillStyle = 'white';
        this.ctx.font = 'bold 32px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('–ü–ê–£–ó–ê', this.gameWidth / 2, this.gameHeight / 2);
        
        this.ctx.font = '16px Arial';
        this.ctx.fillText('–ù–∞–∂–º–∏—Ç–µ SPACE –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è', this.gameWidth / 2, this.gameHeight / 2 + 40);
    }
    
    createShieldEffect() {
        // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–≥–ª–æ—â–µ–Ω–∏—è —â–∏—Ç–∞
        if (!this.shieldEffect) {
            this.shieldEffect = {
                active: false,
                particles: []
            };
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –ø—Ä–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏ —â–∏—Ç–∞ (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)
        for (let i = 0; i < 15; i++) {
            this.bird.trailParticles.push({
                x: this.bird.x + this.bird.width / 2,
                y: this.bird.y + this.bird.height / 2,
                vx: (Math.random() - 0.5) * 6,
                vy: (Math.random() - 0.5) * 6,
                life: 20,
                maxLife: 20,
                color: '#00BFFF'
            });
        }
        
        // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –≤–æ–∫—Ä—É–≥ –ø—Ç–∏—Ü—ã
        const particleCount = 8;
        for (let i = 0; i < particleCount; i++) {
            const angle = (i / particleCount) * Math.PI * 2;
            const distance = 30;
            this.shieldEffect.particles.push({
                x: this.bird.x + Math.cos(angle) * distance,
                y: this.bird.y + Math.sin(angle) * distance,
                vx: Math.cos(angle) * 2,
                vy: Math.sin(angle) * 2,
                life: 30,
                maxLife: 30,
                size: 3
            });
        }
        
        this.shieldEffect.active = true;
    }
    
    updateShieldEffect() {
        if (!this.shieldEffect || !this.shieldEffect.active) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã
        this.shieldEffect.particles = this.shieldEffect.particles.filter(particle => {
            particle.x += particle.vx;
            particle.y += particle.vy;
            particle.life--;
            return particle.life > 0;
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —á–∞—Å—Ç–∏—Ü, –æ—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
        if (this.shieldEffect.particles.length === 0) {
            this.shieldEffect.active = false;
        }
    }
    
    renderShieldEffect() {
        if (!this.shieldEffect || !this.shieldEffect.active) return;
        
        this.ctx.save();
        this.shieldEffect.particles.forEach(particle => {
            const alpha = particle.life / particle.maxLife;
            this.ctx.fillStyle = `rgba(0, 191, 255, ${alpha})`;
            this.ctx.beginPath();
            this.ctx.arc(particle.x, particle.y, particle.size * alpha, 0, Math.PI * 2);
            this.ctx.fill();
        });
        this.ctx.restore();
    }
    
    gameLoop(currentTime = 0) {
        const deltaTime = currentTime - this.lastTime;
        this.lastTime = currentTime;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–Ω–¥–µ—Ä
        this.update(deltaTime);
        this.render();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if (window.UI && this.gameState === 'playing') {
            window.UI.updateGameUI();
        }
        
        // –°–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
        requestAnimationFrame(this.gameLoop);
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    saveDifficulty(difficulty) {
        this.difficulty = difficulty;
        localStorage.setItem('flappyDifficulty', difficulty);
    }
    
    savePowerUpsEnabled(enabled) {
        this.powerUpsEnabled = enabled;
        localStorage.setItem('flappyPowerUps', enabled.toString());
    }
    
    saveSoundEnabled(enabled) {
        this.soundEnabled = enabled;
        localStorage.setItem('flappySound', enabled.toString());
    }
}
