// PowerUps.js - –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–π
class PowerUp {
    constructor(x, y, type) {
        this.x = x;
        this.y = y;
        this.type = type;
        this.width = 25;
        this.height = 25;
        this.collected = false;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è
        this.floatOffset = 0;
        this.floatSpeed = 0.1;
        this.rotationSpeed = 0.05;
        this.rotation = 0;
        this.scale = 1;
        this.scaleDirection = 1;
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã
        this.particles = [];
        this.glowIntensity = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        this.setupType();
    }
    
    setupType() {
        switch (this.type) {
            case 'shield':
                this.color = '#00BFFF';
                this.icon = 'üõ°Ô∏è';
                this.description = '–ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è';
                this.duration = 8000;
                break;
                
            case 'immortal':
                this.color = '#9370DB';
                this.icon = '‚è∞';
                this.description = '–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏';
                this.duration = 5000;
                break;
                
            case 'doublePoints':
                this.color = '#32CD32';
                this.icon = 'üí∞';
                this.description = '–î–≤–æ–π–Ω—ã–µ –æ—á–∫–∏';
                this.duration = 10000;
                break;
                
            case 'smallBird':
                this.color = '#FF69B4';
                this.icon = 'üê£';
                this.description = '–£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –ø—Ç–∏—Ü–∞';
                this.duration = 8000;
                break;
                
            case 'extraLife':
                this.color = '#FFD700';
                this.icon = '‚ù§Ô∏è';
                this.description = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å';
                this.duration = 0; // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                break;
                
            case 'magnetCoin':
                this.color = '#FFA500';
                this.icon = 'üß≤';
                this.description = '–ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã';
                this.duration = 12000;
                break;
        }
    }
    
    update(deltaTime) {
        // –ê–Ω–∏–º–∞—Ü–∏–∏
        this.floatOffset += this.floatSpeed * (deltaTime / 16);
        this.rotation += this.rotationSpeed * (deltaTime / 16);
        
        // –ü—É–ª—å—Å–∞—Ü–∏—è
        this.scale += this.scaleDirection * 0.01 * (deltaTime / 16);
        if (this.scale > 1.2) {
            this.scaleDirection = -1;
        } else if (this.scale < 0.8) {
            this.scaleDirection = 1;
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        this.glowIntensity = 0.5 + Math.sin(this.floatOffset * 2) * 0.5;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã
        this.updateParticles(deltaTime);
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ
        this.x -= 2 * (deltaTime / 16);
    }
    
    updateParticles(deltaTime) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã
        if (Math.random() < 0.1) {
            this.particles.push({
                x: this.x + this.width / 2 + (Math.random() - 0.5) * this.width,
                y: this.y + this.height / 2 + (Math.random() - 0.5) * this.height,
                vx: (Math.random() - 0.5) * 2,
                vy: -0.5 - Math.random() * 1,
                life: 30 + Math.random() * 30,
                maxLife: 30 + Math.random() * 30,
                color: this.color
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞—Å—Ç–∏—Ü—ã
        this.particles = this.particles.filter(particle => {
            particle.x += particle.vx * (deltaTime / 16);
            particle.y += particle.vy * (deltaTime / 16);
            particle.life -= deltaTime / 16;
            return particle.life > 0;
        });
    }
    
    render(ctx) {
        // –†–µ–Ω–¥–µ—Ä —á–∞—Å—Ç–∏—Ü
        this.renderParticles(ctx);
        
        ctx.save();
        
        // –ü–æ–∑–∏—Ü–∏—è —Å –ø–ª–∞–≤–∞—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        const renderY = this.y + Math.sin(this.floatOffset) * 5;
        
        ctx.translate(this.x + this.width / 2, renderY + this.height / 2);
        ctx.rotate(this.rotation);
        ctx.scale(this.scale, this.scale);
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        ctx.shadowColor = this.color;
        ctx.shadowBlur = 10 * this.glowIntensity;
        
        // –û—Å–Ω–æ–≤–∞ power-up
        ctx.fillStyle = this.color;
        ctx.globalAlpha = 0.8;
        ctx.beginPath();
        ctx.arc(0, 0, this.width / 2, 0, Math.PI * 2);
        ctx.fill();
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥
        ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
        ctx.beginPath();
        ctx.arc(0, 0, this.width / 3, 0, Math.PI * 2);
        ctx.fill();
        
        // –ò–∫–æ–Ω–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        ctx.globalAlpha = 1;
        ctx.shadowBlur = 0;
        this.renderIcon(ctx);
        
        ctx.restore();
    }
    
    renderIcon(ctx) {
        ctx.fillStyle = '#FFF';
        ctx.strokeStyle = '#000';
        ctx.lineWidth = 1;
        
        switch (this.type) {
            case 'shield':
                // –©–∏—Ç
                ctx.beginPath();
                ctx.moveTo(0, -8);
                ctx.lineTo(-6, -4);
                ctx.lineTo(-6, 4);
                ctx.lineTo(0, 8);
                ctx.lineTo(6, 4);
                ctx.lineTo(6, -4);
                ctx.closePath();
                ctx.fill();
                ctx.stroke();
                break;
                
            case 'immortal':
                // –ß–∞—Å—ã
                ctx.beginPath();
                ctx.arc(0, 0, 6, 0, Math.PI * 2);
                ctx.fill();
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(0, -4);
                ctx.moveTo(0, 0);
                ctx.lineTo(3, 0);
                ctx.stroke();
                break;
                
            case 'doublePoints':
                // –ú–æ–Ω–µ—Ç–∞
                ctx.beginPath();
                ctx.arc(0, 0, 6, 0, Math.PI * 2);
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = '#000';
                ctx.font = '8px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('2x', 0, 2);
                break;
                
            case 'smallBird':
                // –ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ç–∏—á–∫–∞
                ctx.beginPath();
                ctx.ellipse(0, 0, 4, 3, 0, 0, Math.PI * 2);
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = '#000';
                ctx.beginPath();
                ctx.arc(2, -1, 1, 0, Math.PI * 2);
                ctx.fill();
                break;
                
            case 'extraLife':
                // –°–µ—Ä–¥—Ü–µ
                ctx.fillStyle = '#FF0000';
                ctx.beginPath();
                ctx.moveTo(0, 2);
                ctx.lineTo(-3, -2);
                ctx.lineTo(-1, -4);
                ctx.lineTo(0, -3);
                ctx.lineTo(1, -4);
                ctx.lineTo(3, -2);
                ctx.closePath();
                ctx.fill();
                break;
                
            case 'magnetCoin':
                // –ú–∞–≥–Ω–∏—Ç
                ctx.fillStyle = '#FF0000';
                ctx.fillRect(-4, -6, 3, 8);
                ctx.fillStyle = '#0000FF';
                ctx.fillRect(1, -6, 3, 8);
                ctx.fillStyle = '#FFF';
                ctx.fillRect(-1, -6, 2, 8);
                break;
        }
    }
    
    renderParticles(ctx) {
        this.particles.forEach(particle => {
            const alpha = particle.life / particle.maxLife;
            ctx.save();
            ctx.globalAlpha = alpha;
            ctx.fillStyle = particle.color;
            ctx.beginPath();
            ctx.arc(particle.x, particle.y, 2 * alpha, 0, Math.PI * 2);
            ctx.fill();
            ctx.restore();
        });
    }
    
    checkCollision(bird) {
        const birdBox = bird.getCollisionBox();
        const powerUpBox = {
            x: this.x,
            y: this.y,
            width: this.width,
            height: this.height
        };
        
        return birdBox.x < powerUpBox.x + powerUpBox.width &&
               birdBox.x + birdBox.width > powerUpBox.x &&
               birdBox.y < powerUpBox.y + powerUpBox.height &&
               birdBox.y + birdBox.height > powerUpBox.y;
    }
    
    isOffScreen(gameWidth) {
        return this.x + this.width < 0;
    }
}

class PowerUpManager {
    constructor(game) {
        this.game = game;
        this.powerUps = [];
        this.spawnChance = 0.2;
        this.lastSpawnDistance = 0;
        this.minSpawnDistance = 300;
        
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö power-ups
        this.spawnProbabilities = {
            shield: 0.25,
            immortal: 0.2,
            doublePoints: 0.25,
            smallBird: 0.15,
            extraLife: 0.05,
            magnetCoin: 0.1
        };
        
        // –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –º–∞–≥–Ω–∏—Ç–∞
        this.magnetActive = false;
        this.magnetRange = 100;
    }
    
    update(deltaTime) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ power-ups
        this.powerUps.forEach(powerUp => {
            powerUp.update(deltaTime);
            
            // –≠—Ñ—Ñ–µ–∫—Ç –º–∞–≥–Ω–∏—Ç–∞
            if (this.magnetActive && powerUp.type !== 'extraLife') {
                this.applyMagnetEffect(powerUp);
            }
        });
        
        // –£–¥–∞–ª—è–µ–º power-ups, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—à–ª–∏ –∑–∞ —ç–∫—Ä–∞–Ω
        this.powerUps = this.powerUps.filter(powerUp => !powerUp.isOffScreen(this.game.gameWidth));
        
        // –°–ø–∞–≤–Ω–∏–º –Ω–æ–≤—ã–µ power-ups
        this.spawnPowerUps();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–≥–Ω–∏—Ç–∞
        this.updateMagnetState();
    }
    
    applyMagnetEffect(powerUp) {
        const bird = this.game.bird;
        const dx = (bird.x + bird.width / 2) - (powerUp.x + powerUp.width / 2);
        const dy = (bird.y + bird.height / 2) - (powerUp.y + powerUp.height / 2);
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < this.magnetRange && distance > 0) {
            const force = Math.min(3, 50 / distance);
            powerUp.x += (dx / distance) * force;
            powerUp.y += (dy / distance) * force;
        }
    }
    
    updateMagnetState() {
        this.magnetActive = this.game.bird.powerUps.magnetCoin?.active || false;
    }
    
    spawnPowerUps() {
        this.lastSpawnDistance += 2; // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        
        if (this.lastSpawnDistance >= this.minSpawnDistance && Math.random() < this.spawnChance) {
            const x = this.game.gameWidth;
            const y = 50 + Math.random() * (this.game.gameHeight - 150);
            const type = this.selectPowerUpType();
            
            this.powerUps.push(new window.PowerUp(x, y, type));
            this.lastSpawnDistance = 0;
        }
    }
    
    selectPowerUpType() {
        const random = Math.random();
        let cumulative = 0;
        
        for (const [type, probability] of Object.entries(this.spawnProbabilities)) {
            cumulative += probability;
            if (random <= cumulative) {
                return type;
            }
        }
        
        return 'doublePoints'; // Fallback
    }
    
    checkCollision(bird) {
        for (let i = this.powerUps.length - 1; i >= 0; i--) {
            const powerUp = this.powerUps[i];
            
            if (powerUp.checkCollision(bird)) {
                this.collectPowerUp(powerUp, bird);
                this.powerUps.splice(i, 1);
                break;
            }
        }
    }
    
    collectPowerUp(powerUp, bird) {
        // –ó–≤—É–∫ —Å–±–æ—Ä–∞
        if (this.game.soundEnabled) {
            this.game.playSound('powerUp');
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç power-up
        switch (powerUp.type) {
            case 'shield':
            case 'immortal':
            case 'doublePoints':
            case 'smallBird':
                bird.activatePowerUp(powerUp.type, powerUp.duration);
                break;
                
            case 'extraLife':
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
                this.giveExtraLife();
                break;
                
            case 'magnetCoin':
                bird.activatePowerUp('magnetCoin', powerUp.duration);
                break;
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –ø—Ä–∏ —Å–±–æ—Ä–µ
        this.createCollectionEffect(powerUp.x + powerUp.width / 2, powerUp.y + powerUp.height / 2, powerUp.color);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updatePowerUpUI(powerUp.type, powerUp.duration);
    }
    
    giveExtraLife() {
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∂–∏–∑–Ω–µ–π
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
        this.game.addScore(5);
        console.log('Extra life collected! (+5 points)');
    }
    
    createCollectionEffect(x, y, color) {
        const bird = this.game.bird;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ç–∏—Ü—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        for (let i = 0; i < 10; i++) {
            bird.trailParticles.push({
                x: x + (Math.random() - 0.5) * 20,
                y: y + (Math.random() - 0.5) * 20,
                vx: (Math.random() - 0.5) * 4,
                vy: (Math.random() - 0.5) * 4,
                life: 20 + Math.random() * 20,
                maxLife: 20 + Math.random() * 20,
                color: color
            });
        }
    }
    
    updatePowerUpUI(type, duration) {
        const powerUpIcon = document.getElementById('powerUpIcon');
        const powerUpTimer = document.getElementById('powerUpTimer');
        
        if (duration > 0) {
            powerUpIcon.className = 'power-up-icon';
            powerUpIcon.innerHTML = this.getPowerUpSymbol(type);
            powerUpIcon.style.backgroundColor = this.getPowerUpColor(type);
            
            powerUpTimer.className = 'power-up-timer';
            powerUpTimer.textContent = Math.ceil(duration / 1000) + 's';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
            this.startPowerUpTimer(duration);
        }
    }
    
    startPowerUpTimer(duration) {
        const powerUpTimer = document.getElementById('powerUpTimer');
        let remaining = duration;
        
        const timer = setInterval(() => {
            remaining -= 100;
            if (remaining <= 0) {
                clearInterval(timer);
                document.getElementById('powerUpIcon').className = 'power-up-icon hidden';
                document.getElementById('powerUpTimer').className = 'power-up-timer hidden';
            } else {
                powerUpTimer.textContent = Math.ceil(remaining / 1000) + 's';
            }
        }, 100);
    }
    
    getPowerUpSymbol(type) {
        const symbols = {
            shield: 'üõ°',
            immortal: '‚ú®',
            doublePoints: 'üí∞',
            smallBird: 'üê£',
            extraLife: '‚ù§',
            magnetCoin: 'üß≤'
        };
        return symbols[type] || '‚≠ê';
    }
    
    getPowerUpColor(type) {
        const colors = {
            shield: '#00BFFF',
            immortal: '#FFD700',
            doublePoints: '#32CD32',
            smallBird: '#FF69B4',
            extraLife: '#FFD700',
            magnetCoin: '#FFA500'
        };
        return colors[type] || '#FFF';
    }
    
    reset() {
        this.powerUps = [];
        this.lastSpawnDistance = 0;
        this.magnetActive = false;
        
        // –°–∫—Ä—ã–≤–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        document.getElementById('powerUpIcon').className = 'power-up-icon hidden';
        document.getElementById('powerUpTimer').className = 'power-up-timer hidden';
    }
    
    render(ctx) {
        // –†–µ–Ω–¥–µ—Ä –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—è –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ
        if (this.magnetActive) {
            this.renderMagnetField(ctx);
        }
        
        // –†–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö power-ups
        this.powerUps.forEach(powerUp => {
            powerUp.render(ctx);
        });
        
        // –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (false) {
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.font = '12px Arial';
            ctx.fillText(`PowerUps: ${this.powerUps.length}`, 10, 60);
            ctx.fillText(`Magnet: ${this.magnetActive}`, 10, 75);
        }
    }
    
    renderMagnetField(ctx) {
        const bird = this.game.bird;
        ctx.save();
        ctx.strokeStyle = '#FFA500';
        ctx.lineWidth = 2;
        ctx.globalAlpha = 0.3;
        ctx.setLineDash([5, 5]);
        
        ctx.beginPath();
        ctx.arc(bird.x + bird.width / 2, bird.y + bird.height / 2, this.magnetRange, 0, Math.PI * 2);
        ctx.stroke();
        
        ctx.restore();
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    adjustDifficulty(difficulty) {
        const settings = {
            easy: { spawnChance: 0.3, minSpawnDistance: 250 },
            normal: { spawnChance: 0.2, minSpawnDistance: 300 },
            hard: { spawnChance: 0.15, minSpawnDistance: 350 },
            extreme: { spawnChance: 0.1, minSpawnDistance: 400 }
        };
        
        const setting = settings[difficulty] || settings.normal;
        this.spawnChance = setting.spawnChance;
        this.minSpawnDistance = setting.minSpawnDistance;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.PowerUp = PowerUp;
window.PowerUpManager = PowerUpManager;
