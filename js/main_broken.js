// Main.js - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class App {
    constructor() {
        this.game = null;
        this.isInitialized = false;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        this.init();
    }
    
    async init() {
        try {
            console.log('üöÄ Initializing Flappy Bird Enhanced...');
            
            // UI —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ init.js
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
            this.game = new window.Game();
            
            // –°–≤—è–∑—ã–≤–∞–µ–º UI —Å –∏–≥—Ä–æ–π
            window.ui.setGame(this.game);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            this.setupPerformanceOptimizations();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            this.setupMobileOptimizations();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–≥—Ä—ã
            this.setupGameAnalytics();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            this.setupErrorHandling();
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            window.ui.showMainMenu();
            
            this.isInitialized = true;
            console.log('‚úÖ Flappy Bird Enhanced initialized successfully!');
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.showWelcomeMessage();
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Flappy Bird:', error);
            this.showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    }
    
    // –ú–µ—Ç–æ–¥ initializeUI –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –≤ init.js
    
    setupPerformanceOptimizations() {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.preloadAssets();
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã –∫–∞–¥—Ä–æ–≤
        this.setupFrameRateOptimization();
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
        this.setupMemoryOptimization();
    }
    
    preloadAssets() {
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∑–≤—É–∫–æ–≤
        console.log('üì¶ Preloading assets...');
    }
    
    setupFrameRateOptimization() {
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let frameCount = 0;
        let lastTime = performance.now();
        
        const measurePerformance = () => {
            frameCount++;
            const currentTime = performance.now();
            
            if (currentTime - lastTime >= 1000) {
                const fps = Math.round((frameCount * 1000) / (currentTime - lastTime));
                
                if (fps < 30) {
                    console.warn(`‚ö†Ô∏è Low FPS detected: ${fps}`);
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
                }
                
                frameCount = 0;
                lastTime = currentTime;
            }
            
            requestAnimationFrame(measurePerformance);
        };
        
        requestAnimationFrame(measurePerformance);
    }
    
    setupMemoryOptimization() {
        // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            if (window.gc) {
                window.gc();
                console.log('üßπ Manual garbage collection triggered');
            }
        }, 300000);
    }
    
    // –°—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –≤ init.js
    
    optimizeForMobile() {
        style.textContent = `
            /* –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */
            #gameCanvas {
                will-change: transform;
                transform: translateZ(0);
            }
            
            .ui-overlay {
                will-change: opacity;
            }
            
            /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */
            .achievement-progress {
                background: rgba(255, 255, 255, 0.2);
                border-radius: 10px;
                height: 8px;
                margin: 5px 0;
                overflow: hidden;
                position: relative;
            }
            
            .achievement-progress-bar {
                background: linear-gradient(90deg, #4CAF50, #8BC34A);
                height: 100%;
                transition: width 0.3s ease;
            }
            
            .achievement-progress-text {
                position: absolute;
                top: -20px;
                right: 0;
                font-size: 10px;
                color: rgba(255, 255, 255, 0.7);
            }
            
            .achievement-rarity {
                display: inline-block;
                padding: 2px 8px;
                border-radius: 12px;
                font-size: 10px;
                font-weight: bold;
                text-transform: uppercase;
                margin-top: 5px;
            }
            
            .achievement-rarity.common { background: #95a5a6; color: #2c3e50; }
            .achievement-rarity.rare { background: #3498db; color: white; }
            .achievement-rarity.epic { background: #9b59b6; color: white; }
            .achievement-rarity.legendary { background: #f39c12; color: white; }
            
            .achievements-stats {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 10px;
                padding: 15px;
                margin-top: 20px;
                text-align: center;
            }
            
            .achievements-stats h3 {
                margin-bottom: 10px;
                color: #FFD700;
            }
            
            .achievements-stats p {
                margin: 5px 0;
                font-size: 14px;
            }
            
            /* –°—Ç–∏–ª–∏ –¥–ª—è –ø–∞—É–∑—ã */
            .pause-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: none;
                justify-content: center;
                align-items: center;
                z-index: 1000;
            }
            
            .pause-menu {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 20px;
                padding: 30px;
                text-align: center;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            }
            
            .pause-menu h2 {
                color: white;
                margin-bottom: 20px;
                font-size: 2rem;
            }
            
            .pause-menu .btn {
                margin: 10px;
            }
            
            /* –ê–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */
            .loading-screen {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, #70c5ce 0%, #4a9eff 100%);
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                z-index: 9999;
                transition: opacity 0.5s ease;
            }
            
            .loading-bird {
                width: 60px;
                height: 45px;
                background: #FFD700;
                border-radius: 50%;
                position: relative;
                animation: loadingFly 1s ease-in-out infinite alternate;
            }
            
            .loading-bird::before {
                content: '';
                position: absolute;
                width: 20px;
                height: 15px;
                background: #FFA500;
                border-radius: 50%;
                top: 10px;
                left: -10px;
                animation: wingFlap 0.3s ease-in-out infinite alternate;
            }
            
            @keyframes loadingFly {
                from { transform: translateY(0px); }
                to { transform: translateY(-20px); }
            }
            
            @keyframes wingFlap {
                from { transform: rotate(-30deg); }
                to { transform: rotate(30deg); }
            }
            
            .loading-text {
                color: white;
                font-size: 1.2rem;
                margin-top: 20px;
                animation: pulse 1.5s ease-in-out infinite;
            }
            
            /* –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */
            .new-achievement {
                display: flex;
                align-items: center;
                gap: 10px;
                padding: 5px 10px;
                background: rgba(255, 215, 0, 0.2);
                border-radius: 8px;
                margin: 5px 0;
                border-left: 3px solid #FFD700;
            }
            
            .new-achievement .achievement-icon {
                font-size: 1.2rem;
            }
            
            .new-achievement .achievement-title {
                font-weight: bold;
                color: #FFD700;
            }
        `;
        document.head.appendChild(style);
    }
    
    setupPerformanceOptimizations() {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.preloadAssets();
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã –∫–∞–¥—Ä–æ–≤
        this.setupFrameRateOptimization();
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
        this.setupMemoryManagement();
    }
    
    preloadAssets() {
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∑–≤—É–∫–æ–≤
        console.log('üì¶ Preloading assets...');
    }
    
    setupFrameRateOptimization() {
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        let frameCount = 0;
        let lastTime = performance.now();
        
        const checkPerformance = () => {
            frameCount++;
            const now = performance.now();
            
            if (now - lastTime > 1000) {
                const fps = frameCount;
                frameCount = 0;
                lastTime = now;
                
                // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ FPS
                if (fps < 30 && this.game) {
                    console.log('‚ö° Low FPS detected, optimizing...');
                    this.enablePerformanceMode();
                } else if (fps > 55 && this.game) {
                    this.disablePerformanceMode();
                }
            }
            
            requestAnimationFrame(checkPerformance);
        };
        
        requestAnimationFrame(checkPerformance);
    }
    
    enablePerformanceMode() {
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        if (this.game && this.game.bird) {
            this.game.bird.trailParticles = this.game.bird.trailParticles.slice(0, 5);
        }
        
        if (this.game && this.game.powerUps) {
            this.game.powerUps.powerUps.forEach(powerUp => {
                powerUp.particles = powerUp.particles.slice(0, 2);
            });
        }
    }
    
    disablePerformanceMode() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    }
    
    setupMemoryManagement() {
        // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            if (this.game && this.game.gameState !== 'playing') {
                this.cleanupMemory();
            }
        }, 30000);
    }
    
    cleanupMemory() {
        // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (this.game) {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
            if (this.game.bird && this.game.bird.trailParticles.length > 20) {
                this.game.bird.trailParticles = this.game.bird.trailParticles.slice(-10);
            }
            
            // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä—É–±
            if (this.game.pipes && this.game.pipes.pipes.length > 5) {
                this.game.pipes.pipes = this.game.pipes.pipes.slice(-3);
            }
        }
    }
    
    setupMobileOptimizations() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        if (isMobile) {
            console.log('üì± Mobile device detected, applying optimizations...');
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            document.body.classList.add('mobile-optimized');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-—Ç–µ–≥ –¥–ª—è viewport –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!document.querySelector('meta[name="viewport"]')) {
                const viewport = document.createElement('meta');
                viewport.name = 'viewport';
                viewport.content = 'width=device-width, initial-scale=1.0, user-scalable=no';
                document.head.appendChild(viewport);
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ —Ç–∞—á-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
            document.body.style.cursor = 'none';
            
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞—á-—Å–æ–±—ã—Ç–∏–π
            this.setupTouchOptimizations();
        }
    }
    
    setupTouchOptimizations() {
        let touchStartTime = 0;
        
        document.addEventListener('touchstart', (e) => {
            touchStartTime = Date.now();
            e.preventDefault();
        }, { passive: false });
        
        document.addEventListener('touchend', (e) => {
            const touchDuration = Date.now() - touchStartTime;
            
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ –∫–∞—Å–∞–Ω–∏—è
            if (touchDuration > 50 && touchDuration < 500) {
                if (this.game && this.game.gameState === 'playing') {
                    this.game.handleInput();
                }
            }
            
            e.preventDefault();
        }, { passive: false });
    }
    
    setupGameAnalytics() {
        // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–≥—Ä—ã
        this.analytics = {
            sessionStart: Date.now(),
            gamesPlayed: 0,
            totalScore: 0,
            maxScore: 0,
            powerUpsCollected: 0,
            achievements: 0
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.sendAnalytics();
        }, 300000);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.sendAnalytics();
        });
    }
    
    sendAnalytics() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('üìä Analytics data:', this.analytics);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        localStorage.setItem('flappyAnalytics', JSON.stringify(this.analytics));
    }
    
    setupErrorHandling() {
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', (event) => {
            console.error('üö® Global error:', event.error);
            this.handleError(event.error);
        });
        
        window.addEventListener('unhandledrejection', (event) => {
            console.error('üö® Unhandled promise rejection:', event.reason);
            this.handleError(event.reason);
        });
    }
    
    handleError(error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        const errorInfo = {
            message: error.message || 'Unknown error',
            stack: error.stack || 'No stack trace',
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            gameState: this.game ? this.game.gameState : 'unknown'
        };
        
        console.error('Error details:', errorInfo);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (this.isInitialized && window.ui) {
            window.ui.showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.', 'error');
        }
        
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    }
    
    showWelcomeMessage() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –≤–∏–∑–∏—Ç
        const isFirstVisit = !localStorage.getItem('flappyFirstVisit');
        
        if (isFirstVisit) {
            localStorage.setItem('flappyFirstVisit', 'true');
            
            setTimeout(() => {
                if (window.ui) window.ui.showToast('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flappy Bird Enhanced! üê¶', 'success', 4000);
            }, 1000);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            setTimeout(() => {
                if (window.ui) window.ui.showToast('–ù–∞–∂–º–∏—Ç–µ SPACE –∏–ª–∏ –∫–æ—Å–Ω–∏—Ç–µ—Å—å —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø—Ä—ã–∂–∫–∞', 'info', 4000);
            }, 3000);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
            const lastScore = localStorage.getItem('flappyHighScore') || 0;
            if (lastScore > 0) {
                setTimeout(() => {
                    if (window.ui) window.ui.showToast(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à —Ä–µ–∫–æ—Ä–¥: ${lastScore}`, 'info', 3000);
                }, 500);
            }
        }
    }
    
    showErrorMessage(message) {
        // –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
        const errorScreen = document.createElement('div');
        errorScreen.className = 'error-screen';
        errorScreen.innerHTML = `
            <div class="error-content">
                <h2>üòï –£–ø—Å!</h2>
                <p>${message}</p>
                <button onclick="location.reload()" class="btn btn-primary">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
            </div>
        `;
        
        const style = document.createElement('style');
        style.textContent = `
            .error-screen {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
            }
            
            .error-content {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 20px;
                padding: 40px;
                text-align: center;
                color: white;
                backdrop-filter: blur(10px);
            }
            
            .error-content h2 {
                font-size: 2rem;
                margin-bottom: 20px;
            }
            
            .error-content p {
                font-size: 1.1rem;
                margin-bottom: 30px;
                opacity: 0.9;
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(errorScreen);
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    enableDebugMode() {
        if (this.game && window.ui) {
            window.ui.showDebugInfo(true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
            const updateDebug = () => {
                if (window.ui) window.ui.updateDebugInfo();
                requestAnimationFrame(updateDebug);
            };
            updateDebug();
            
            console.log('üêõ Debug mode enabled');
        }
    }
    
    disableDebugMode() {
        if (window.ui) window.ui.showDebugInfo(false);
        console.log('üêõ Debug mode disabled');
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    runTests() {
        console.log('üß™ Running tests...');
        
        const tests = [
            () => this.testGameInitialization(),
            () => this.testUIResponsiveness(),
            () => this.testLocalStorage(),
            () => this.testPerformance()
        ];
        
        tests.forEach((test, index) => {
            try {
                test();
                console.log(`‚úÖ Test ${index + 1} passed`);
            } catch (error) {
                console.error(`‚ùå Test ${index + 1} failed:`, error);
            }
        });
    }
    
    testGameInitialization() {
        if (!this.game) throw new Error('Game not initialized');
        if (!this.game.bird) throw new Error('Bird not initialized');
        if (!this.game.pipes) throw new Error('Pipes not initialized');
        if (!this.game.powerUps) throw new Error('PowerUps not initialized');
        if (!this.game.achievements) throw new Error('Achievements not initialized');
    }
    
    testUIResponsiveness() {
        const screens = ['mainMenu', 'gameHUD', 'gameOverScreen', 'settingsScreen', 'achievementsScreen'];
        screens.forEach(screenId => {
            const screen = document.getElementById(screenId);
            if (!screen) throw new Error(`Screen ${screenId} not found`);
        });
    }
    
    testLocalStorage() {
        try {
            localStorage.setItem('test', 'value');
            if (localStorage.getItem('test') !== 'value') {
                throw new Error('localStorage write/read failed');
            }
            localStorage.removeItem('test');
        } catch (error) {
            throw new Error('localStorage not available');
        }
    }
    
    testPerformance() {
        const start = performance.now();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        for (let i = 0; i < 1000; i++) {
            const testBird = { x: i, y: i, velocity: 0 };
        }
        
        const end = performance.now();
        if (end - start > 100) {
            throw new Error('Performance test failed - too slow');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –°—Ç–∞—Ä—ã–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ development)
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    document.addEventListener('keydown', (e) => {
        // Ctrl + Shift + D - –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        if (e.ctrlKey && e.shiftKey && e.code === 'KeyD') {
            window.FlappyApp.enableDebugMode();
        }
        
        // Ctrl + Shift + T - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        if (e.ctrlKey && e.shiftKey && e.code === 'KeyT') {
            window.FlappyApp.runTests();
        }
        
        // Ctrl + Shift + F - –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
        if (e.ctrlKey && e.shiftKey && e.code === 'KeyF') {
            if (window.ui) window.ui.toggleFullscreen();
        }
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.App = App;
