// UI.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UI {
    constructor() {
        this.currentScreen = 'mainMenu';
        this.game = null;
        
        this.setupEventListeners();
        this.updateHighScore();
    }
    
    setGame(game) {
        this.game = game;
    }
    
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        document.getElementById('playBtn').addEventListener('click', () => {
            this.startGame();
        });
        
        document.getElementById('settingsBtn').addEventListener('click', () => {
            this.showSettings();
        });
        
        document.getElementById('achievementsBtn').addEventListener('click', () => {
            this.showAchievements();
        });
        
        document.getElementById('helpBtn').addEventListener('click', () => {
            this.showHelp();
        });
        
        document.getElementById('fullscreenBtn').addEventListener('click', () => {
            this.toggleFullscreen();
        });
        
        // –ö–Ω–æ–ø–∫–∏ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        document.getElementById('restartBtn').addEventListener('click', () => {
            this.startGame();
        });
        
        document.getElementById('menuBtn').addEventListener('click', () => {
            this.showMainMenu();
        });
        
        document.getElementById('finaleMenuBtn').addEventListener('click', () => {
            this.showMainMenu();
        });
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('backToMenuBtn').addEventListener('click', () => {
            this.showMainMenu();
        });
        
        document.getElementById('achievementsBackBtn').addEventListener('click', () => {
            this.showMainMenu();
        });
        
        document.getElementById('helpBackBtn').addEventListener('click', () => {
            this.showMainMenu();
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        document.getElementById('soundToggle').addEventListener('change', (e) => {
            if (this.game) {
                this.game.saveSoundEnabled(e.target.checked);
            }
        });
        
        document.getElementById('godModeToggle').addEventListener('change', (e) => {
            if (this.game) {
                this.game.saveGodMode(e.target.checked);
            }
        });
        
        document.getElementById('difficultySelect').addEventListener('change', (e) => {
            if (this.game) {
                this.game.saveDifficulty(e.target.value);
            }
        });
        
        document.getElementById('powerUpsToggle').addEventListener('change', (e) => {
            if (this.game) {
                this.game.savePowerUpsEnabled(e.target.checked);
            }
        });
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        document.addEventListener('keydown', (e) => {
            this.handleKeyPress(e);
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        document.addEventListener('touchmove', (e) => {
            e.preventDefault();
        }, { passive: false });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (document.hidden && this.game && this.game.gameState === 'playing') {
                this.game.pause();
            }
        });
    }
    
    handleKeyPress(e) {
        switch (e.code) {
            case 'Escape':
                if (this.currentScreen === 'playing') {
                    this.game.pause();
                } else if (this.currentScreen !== 'mainMenu') {
                    this.showMainMenu();
                }
                break;
                
            case 'Enter':
                if (this.currentScreen === 'mainMenu') {
                    this.startGame();
                } else if (this.currentScreen === 'gameOver') {
                    this.startGame();
                }
                break;
                
            case 'Space':
                if (this.game && this.game.gameState === 'paused') {
                    this.game.pause(); // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
                }
                break;
        }
    }
    
    startGame() {
        this.hideAllScreens();
        this.showScreen('gameHUD');
        this.currentScreen = 'playing';
        
        if (this.game) {
            this.game.startGame();
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
        document.body.style.cursor = 'none';
    }
    
    showMainMenu() {
        this.hideAllScreens();
        this.showScreen('mainMenu');
        this.currentScreen = 'mainMenu';
        this.updateHighScore();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        document.body.style.cursor = 'auto';
    }
    
    showGameOver(score, highScore) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
        document.getElementById('finalScore').textContent = score;
        document.getElementById('bestScore').textContent = highScore;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (this.game && this.game.achievements) {
            const newAchievements = this.game.achievements.checkAchievements(score);
            this.displayNewAchievements(newAchievements);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
        this.hideAllScreens();
        this.showScreen('gameOverScreen');
        this.currentScreen = 'gameOver';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        document.body.style.cursor = 'auto';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            document.getElementById('gameOverScreen').style.animation = 'fadeIn 0.5s ease';
        }, 100);
    }
    
    showSettings() {
        this.hideAllScreens();
        this.showScreen('settingsScreen');
        this.currentScreen = 'settings';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (this.game) {
            document.getElementById('soundToggle').checked = this.game.soundEnabled;
            document.getElementById('difficultySelect').value = this.game.difficulty;
            document.getElementById('powerUpsToggle').checked = this.game.powerUpsEnabled;
            document.getElementById('godModeToggle').checked = this.game.godMode;
        }
    }
    
    showAchievements() {
        this.hideAllScreens();
        this.showScreen('achievementsScreen');
        this.currentScreen = 'achievements';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (this.game && this.game.achievements) {
            this.game.achievements.populateAchievementsList();
        }
    }
    
    showHelp() {
        this.hideAllScreens();
        this.showScreen('helpScreen');
        this.currentScreen = 'help';
    }
    
    showGodModeFinale(score) {
        this.hideAllScreens();
        this.showScreen('godModeFinaleScreen');
        this.currentScreen = 'godModeFinale';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç
        document.getElementById('finaleScore').textContent = score;
        
        console.log(`üéÜ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª —Ä–µ–∂–∏–º–∞ –±–æ–≥–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: ${score}`);
    }
    
    hideAllScreens() {
        const screens = ['mainMenu', 'gameHUD', 'gameOverScreen', 'settingsScreen', 'achievementsScreen', 'helpScreen', 'godModeFinaleScreen'];
        screens.forEach(screenId => {
            const screen = document.getElementById(screenId);
            if (screen) {
                screen.classList.add('hidden');
            }
        });
    }
    
    showScreen(screenId) {
        const screen = document.getElementById(screenId);
        if (screen) {
            screen.classList.remove('hidden');
        }
    }
    
    updateScore(score) {
        const scoreElement = document.getElementById('currentScore');
        if (scoreElement) {
            scoreElement.textContent = score;
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å—á–µ—Ç–∞
            scoreElement.style.transform = 'scale(1.2)';
            setTimeout(() => {
                scoreElement.style.transform = 'scale(1)';
            }, 150);
        }
    }
    
    updateHighScore() {
        const highScoreElement = document.getElementById('highScore');
        if (highScoreElement && this.game) {
            highScoreElement.textContent = this.game.highScore;
        }
    }
    
    displayNewAchievements(achievements) {
        const container = document.getElementById('achievementsEarned');
        if (!container || achievements.length === 0) {
            container.style.display = 'none';
            return;
        }
        
        container.style.display = 'block';
        container.innerHTML = '<h3>üèÜ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h3>';
        
        achievements.forEach(achievement => {
            const achievementDiv = document.createElement('div');
            achievementDiv.className = 'new-achievement';
            achievementDiv.innerHTML = `
                <span class="achievement-icon">${achievement.icon}</span>
                <span class="achievement-title">${achievement.title}</span>
            `;
            container.appendChild(achievementDiv);
        });
    }
    
    showPauseMenu() {
        // –°–æ–∑–¥–∞–µ–º overlay –¥–ª—è –ø–∞—É–∑—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let pauseOverlay = document.getElementById('pauseOverlay');
        if (!pauseOverlay) {
            pauseOverlay = document.createElement('div');
            pauseOverlay.id = 'pauseOverlay';
            pauseOverlay.className = 'pause-overlay';
            pauseOverlay.innerHTML = `
                <div class="pause-menu">
                    <h2>–ü–∞—É–∑–∞</h2>
                    <button id="resumeBtn" class="btn btn-primary">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
                    <button id="pauseMenuBtn" class="btn btn-secondary">–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
                </div>
            `;
            document.body.appendChild(pauseOverlay);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            document.getElementById('resumeBtn').addEventListener('click', () => {
                this.game.pause(); // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
                this.hidePauseMenu();
            });
            
            document.getElementById('pauseMenuBtn').addEventListener('click', () => {
                this.hidePauseMenu();
                this.showMainMenu();
            });
        }
        
        pauseOverlay.style.display = 'flex';
    }
    
    hidePauseMenu() {
        const pauseOverlay = document.getElementById('pauseOverlay');
        if (pauseOverlay) {
            pauseOverlay.style.display = 'none';
        }
    }
    
    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UI
    createLoadingSpinner() {
        const spinner = document.createElement('div');
        spinner.className = 'loading';
        return spinner;
    }
    
    showToast(message, type = 'info', duration = 3000) {
        // –°–æ–∑–¥–∞–µ–º toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        
        // –°—Ç–∏–ª–∏ –¥–ª—è toast
        const style = document.createElement('style');
        style.textContent = `
            .toast {
                position: fixed;
                top: 80px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 10px 20px;
                border-radius: 20px;
                z-index: 1000;
                animation: toastSlideIn 0.3s ease, toastSlideOut 0.3s ease ${duration - 300}ms forwards;
            }
            
            .toast-success { background: rgba(76, 175, 80, 0.9); }
            .toast-error { background: rgba(244, 67, 54, 0.9); }
            .toast-warning { background: rgba(255, 152, 0, 0.9); }
            
            @keyframes toastSlideIn {
                from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
                to { transform: translateX(-50%) translateY(0); opacity: 1; }
            }
            
            @keyframes toastSlideOut {
                from { transform: translateX(-50%) translateY(0); opacity: 1; }
                to { transform: translateX(-50%) translateY(-100%); opacity: 0; }
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(toast);
        
        // –£–¥–∞–ª—è–µ–º toast –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (document.body.contains(toast)) {
                document.body.removeChild(toast);
            }
            if (document.head.contains(style)) {
                document.head.removeChild(style);
            }
        }, duration);
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimizeForMobile() {
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        if (isMobile) {
            document.body.classList.add('mobile-device');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
            window.addEventListener('load', () => {
                setTimeout(() => {
                    window.scrollTo(0, 1);
                }, 100);
            });
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            const viewport = document.querySelector('meta[name="viewport"]');
            if (viewport) {
                viewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';
            }
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º
    toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen().catch(err => {
                console.log('Fullscreen not supported:', err);
            });
        } else {
            document.exitFullscreen();
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    updateGameUI() {
        if (this.game && this.currentScreen === 'playing') {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—ë—Ä–≥–∞–Ω—å—è
            const now = Date.now();
            if (!this.lastUIUpdate || now - this.lastUIUpdate >= 50) { // –ú–∞–∫—Å–∏–º—É–º 20 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
                this.updateScore(this.game.score);
                this.lastUIUpdate = now;
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ power-ups –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ powerups.js
        }
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
    animateScreenTransition(fromScreen, toScreen) {
        const from = document.getElementById(fromScreen);
        const to = document.getElementById(toScreen);
        
        if (from && to) {
            from.style.animation = 'fadeOut 0.3s ease forwards';
            
            setTimeout(() => {
                from.classList.add('hidden');
                to.classList.remove('hidden');
                to.style.animation = 'fadeIn 0.3s ease';
            }, 300);
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    showDebugInfo(visible = true) {
        let debugPanel = document.getElementById('debugPanel');
        
        if (visible && !debugPanel) {
            debugPanel = document.createElement('div');
            debugPanel.id = 'debugPanel';
            debugPanel.style.cssText = `
                position: fixed;
                top: 10px;
                left: 10px;
                background: rgba(0, 0, 0, 0.7);
                color: white;
                padding: 10px;
                border-radius: 5px;
                font-family: monospace;
                font-size: 12px;
                z-index: 999;
                pointer-events: none;
            `;
            document.body.appendChild(debugPanel);
        } else if (!visible && debugPanel) {
            debugPanel.remove();
        }
    }
    
    updateDebugInfo() {
        const debugPanel = document.getElementById('debugPanel');
        if (debugPanel && this.game) {
            debugPanel.innerHTML = `
                FPS: ${Math.round(1000 / (performance.now() - this.game.lastTime))}
                <br>Score: ${this.game.score}
                <br>Bird Y: ${Math.round(this.game.bird.y)}
                <br>Velocity: ${Math.round(this.game.bird.velocity * 10) / 10}
                <br>Pipes: ${this.game.pipes.pipes.length}
                <br>PowerUps: ${this.game.powerUps.powerUps.length}
                <br>State: ${this.game.gameState}
            `;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UI
window.UI = new UI();
