// Service Worker –¥–ª—è Flappy Bird Enhanced
const CACHE_NAME = 'flappy-bird-v1.0.0';
const STATIC_CACHE = 'flappy-bird-static-v1';
const DYNAMIC_CACHE = 'flappy-bird-dynamic-v1';

// –§–∞–π–ª—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const STATIC_FILES = [
  '/',
  '/index.html',
  '/styles.css',
  '/js/main.js',
  '/js/game.js',
  '/js/bird.js',
  '/js/pipes.js',
  '/js/powerups.js',
  '/js/achievements.js',
  '/js/ui.js',
  '/manifest.json'
];

// –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–º–∏
const NETWORK_FIRST = [
  '/api/',
  '/analytics/'
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', event => {
  console.log('SW: Installing Service Worker...');
  
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then(cache => {
        console.log('SW: Caching static files');
        return cache.addAll(STATIC_FILES);
      })
      .then(() => {
        console.log('SW: Static files cached successfully');
        return self.skipWaiting();
      })
      .catch(error => {
        console.error('SW: Error caching static files:', error);
      })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', event => {
  console.log('SW: Activating Service Worker...');
  
  event.waitUntil(
    Promise.all([
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏
      caches.keys().then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
              console.log('SW: Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      }),
      // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      self.clients.claim()
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', event => {
  const request = event.request;
  const url = new URL(request.url);
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º non-GET –∑–∞–ø—Ä–æ—Å—ã
  if (request.method !== 'GET') {
    return;
  }
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º chrome-extension –∑–∞–ø—Ä–æ—Å—ã
  if (url.protocol === 'chrome-extension:') {
    return;
  }
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è Cache First –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  if (isStaticFile(request.url)) {
    event.respondWith(cacheFirst(request));
    return;
  }
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è Network First –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  if (isNetworkFirst(request.url)) {
    event.respondWith(networkFirst(request));
    return;
  }
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è Stale While Revalidate –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  event.respondWith(staleWhileRevalidate(request));
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º
function isStaticFile(url) {
  return STATIC_FILES.some(file => url.includes(file)) || 
         url.includes('.css') || 
         url.includes('.js') || 
         url.includes('.png') || 
         url.includes('.jpg') || 
         url.includes('.ico');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ URL —Å—Ç—Ä–∞—Ç–µ–≥–∏—é Network First
function isNetworkFirst(url) {
  return NETWORK_FIRST.some(pattern => url.includes(pattern));
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è Cache First
async function cacheFirst(request) {
  try {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    const networkResponse = await fetch(request);
    
    // –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (networkResponse.status === 200) {
      const cache = await caches.open(STATIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.error('SW: Cache First failed:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è HTML –∑–∞–ø—Ä–æ—Å–æ–≤
    if (request.headers.get('accept').includes('text/html')) {
      return caches.match('/offline.html') || createOfflineResponse();
    }
    
    throw error;
  }
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è Network First
async function networkFirst(request) {
  try {
    const networkResponse = await fetch(request);
    
    // –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (networkResponse.status === 200) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('SW: Network failed, trying cache:', request.url);
    const cachedResponse = await caches.match(request);
    
    if (cachedResponse) {
      return cachedResponse;
    }
    
    throw error;
  }
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è Stale While Revalidate
async function staleWhileRevalidate(request) {
  const cache = await caches.open(DYNAMIC_CACHE);
  const cachedResponse = await cache.match(request);
  
  // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
  const fetchPromise = fetch(request).then(networkResponse => {
    if (networkResponse.status === 200) {
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  }).catch(error => {
    console.log('SW: Network failed for:', request.url);
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –∂–¥–µ–º —Å–µ—Ç–µ–≤–æ–π –æ—Ç–≤–µ—Ç
  return cachedResponse || fetchPromise;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –æ—Ç–≤–µ—Ç–∞
function createOfflineResponse() {
  const offlineHtml = `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Flappy Bird - –û—Ñ–ª–∞–π–Ω</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background: linear-gradient(135deg, #70c5ce 0%, #4a9eff 100%);
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                margin: 0;
                color: white;
                text-align: center;
            }
            .offline-container {
                background: rgba(0, 0, 0, 0.3);
                padding: 40px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
            }
            .offline-bird {
                font-size: 4rem;
                margin-bottom: 20px;
                animation: float 2s ease-in-out infinite;
            }
            @keyframes float {
                0%, 100% { transform: translateY(0px); }
                50% { transform: translateY(-20px); }
            }
            .retry-btn {
                background: #FFD700;
                color: #333;
                border: none;
                padding: 12px 24px;
                border-radius: 25px;
                font-size: 1.1rem;
                font-weight: bold;
                cursor: pointer;
                margin-top: 20px;
                transition: transform 0.2s;
            }
            .retry-btn:hover {
                transform: translateY(-2px);
            }
        </style>
    </head>
    <body>
        <div class="offline-container">
            <div class="offline-bird">üê¶</div>
            <h1>–í—ã –æ—Ñ–ª–∞–π–Ω</h1>
            <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p>
            <p>–ò–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ!</p>
            <button class="retry-btn" onclick="location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
    </body>
    </html>
  `;
  
  return new Response(offlineHtml, {
    headers: { 'Content-Type': 'text/html' }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
self.addEventListener('message', event => {
  console.log('SW: Received message:', event.data);
  
  switch (event.data.type) {
    case 'SKIP_WAITING':
      self.skipWaiting();
      break;
      
    case 'GET_VERSION':
      event.ports[0].postMessage({ version: CACHE_NAME });
      break;
      
    case 'CLEAR_CACHE':
      clearAllCaches().then(() => {
        event.ports[0].postMessage({ success: true });
      });
      break;
      
    case 'CACHE_ANALYTICS':
      cacheAnalyticsData(event.data.data);
      break;
  }
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π
async function clearAllCaches() {
  const cacheNames = await caches.keys();
  return Promise.all(
    cacheNames.map(cacheName => caches.delete(cacheName))
  );
}

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async function cacheAnalyticsData(data) {
  try {
    const cache = await caches.open(DYNAMIC_CACHE);
    const response = new Response(JSON.stringify(data), {
      headers: { 'Content-Type': 'application/json' }
    });
    await cache.put('/analytics/cached-data', response);
    console.log('SW: Analytics data cached');
  } catch (error) {
    console.error('SW: Error caching analytics:', error);
  }
}

// –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
self.addEventListener('sync', event => {
  console.log('SW: Background sync:', event.tag);
  
  switch (event.tag) {
    case 'background-sync-analytics':
      event.waitUntil(syncAnalytics());
      break;
      
    case 'background-sync-scores':
      event.waitUntil(syncScores());
      break;
  }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
async function syncAnalytics() {
  try {
    const cache = await caches.open(DYNAMIC_CACHE);
    const cachedResponse = await cache.match('/analytics/cached-data');
    
    if (cachedResponse) {
      const data = await cachedResponse.json();
      
      // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      console.log('SW: Syncing analytics data:', data);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      await cache.delete('/analytics/cached-data');
    }
  } catch (error) {
    console.error('SW: Error syncing analytics:', error);
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç–æ–≤
async function syncScores() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –∏–∑ localStorage —á–µ—Ä–µ–∑ postMessage
    const clients = await self.clients.matchAll();
    clients.forEach(client => {
      client.postMessage({
        type: 'SYNC_SCORES'
      });
    });
  } catch (error) {
    console.error('SW: Error syncing scores:', error);
  }
}

// Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
self.addEventListener('push', event => {
  console.log('SW: Push notification received');
  
  const options = {
    body: event.data ? event.data.text() : '–í—Ä–µ–º—è –ø–æ–∏–≥—Ä–∞—Ç—å –≤ Flappy Bird!',
    icon: '/assets/icon-192.png',
    badge: '/assets/badge-72.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: '1'
    },
    actions: [
      {
        action: 'play',
        title: '–ò–≥—Ä–∞—Ç—å',
        icon: '/assets/action-play.png'
      },
      {
        action: 'close',
        title: '–ó–∞–∫—Ä—ã—Ç—å',
        icon: '/assets/action-close.png'
      }
    ],
    requireInteraction: true
  };
  
  event.waitUntil(
    self.registration.showNotification('Flappy Bird Enhanced', options)
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', event => {
  console.log('SW: Notification click received');
  
  event.notification.close();
  
  if (event.action === 'play') {
    event.waitUntil(
      clients.openWindow('/?action=play')
    );
  } else if (event.action === 'close') {
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    return;
  } else {
    // –ö–ª–∏–∫ –ø–æ —Å–∞–º–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('notificationclose', event => {
  console.log('SW: Notification closed:', event.notification.tag);
  
  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ñ–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
self.addEventListener('periodicsync', event => {
  console.log('SW: Periodic sync:', event.tag);
  
  if (event.tag === 'daily-sync') {
    event.waitUntil(performDailySync());
  }
});

// –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
async function performDailySync() {
  try {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–µ—à–µ–π
    await cleanupOldCaches();
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    await preloadResources();
    
    console.log('SW: Daily sync completed');
  } catch (error) {
    console.error('SW: Daily sync failed:', error);
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–µ—à–µ–π
async function cleanupOldCaches() {
  const oneWeekAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
  
  // –≠–º—É–ª—è—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  console.log('SW: Cleaning up old caches');
}

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
async function preloadResources() {
  const resourcesToPreload = [
    '/assets/icon-192.png',
    '/assets/icon-512.png'
  ];
  
  const cache = await caches.open(STATIC_CACHE);
  
  for (const resource of resourcesToPreload) {
    try {
      const response = await fetch(resource);
      if (response.ok) {
        await cache.put(resource, response);
      }
    } catch (error) {
      console.log('SW: Failed to preload:', resource);
    }
  }
}

console.log('SW: Service Worker loaded and ready!');
